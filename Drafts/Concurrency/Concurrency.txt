---------------------------------------------------------------------------Some random notes on concurrency---------------------------------------------------------------------------"These do not work as described in Smalltalk by Example.Probably in VW the Transcript is thread-safe."[10 timesRepeat: [Transcript show: '1']] fork. [10 timesRepeat: [Transcript show: '2']] fork.  [10 timesRepeat: [Transcript show: '1'. (Delay forMilliseconds: 1) wait]] fork. [10 timesRepeat: [Transcript show: '2'. (Delay forMilliseconds: 1) wait]] fork. [10 timesRepeat: [Transcript show: '1'. Processor yield]] fork. [10 timesRepeat: [Transcript show: '2'. Processor yield]] fork.  ---------------------------------------------------------------------------TranscriptStream>>#show: uses a semaphore -- how is this supposed to work?What is it there for?---------------------------------------------------------------------------"This works in Squeak."[10 timesRepeat: [Transcript show: '1']] forkAt: 50. (Delay forMilliseconds: 1) wait. [10 timesRepeat: [Transcript show: '2']] forkAt: 51. ---------------------------------------------------------------------------sem := Semaphore forMutualExclusion.[10 timesRepeat: [sem critical: [Transcript show: '1'].		(Delay forMilliseconds: 100 atRandom) wait]] fork.[10 timesRepeat: [sem critical: [Transcript show: '2'].		(Delay forMilliseconds: 100 atRandom) wait]] fork.---------------------------------------------------------------------------sem := Semaphore forMutualExclusion.repeater := [:text | [ 10 timesRepeat: [			sem critical: [Transcript show: text].			(Delay forMilliseconds: 100 atRandom) wait ] 		] fixTemps fork] .repeater value: '1'.repeater value: '2'.---------------------------------------------------------------------------*** Can we use method wrappers to make the Transcript thread-safe?---------------------------------------------------------------------------'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 1 October 2007 at 12:22:05 pm'!TranscriptStream subclass: #SafeTranscriptStream	instanceVariableNames: 'mutex'	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Streams'!!SafeTranscriptStream methodsFor: 'as yet unclassified' stamp: 'on 10/1/2007 12:18'!critical: aBlock	^ self mutex critical: aBlock! !!SafeTranscriptStream methodsFor: 'as yet unclassified' stamp: 'on 10/1/2007 12:16'!mutex	^mutex ifNil:[mutex := Semaphore forMutualExclusion]! !!SafeTranscriptStream methodsFor: 'as yet unclassified' stamp: 'on 10/1/2007 12:18'!show: anObject	^ self critical: [ super show: anObject ]! !---------------------------------------------------------------------------Transcript := SafeTranscriptStream new.---------------------------------------------------------------------------